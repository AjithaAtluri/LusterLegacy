} from "@shared/schema";
import multer from "multer";
import path from "path";
import { calculateJewelryPrice } from "./utils/price-calculator";
import fs from "fs";
import { validateAdmin } from "./utils";
import { v4 as uuidv4 } from "uuid";
import { paypalClientId, createOrder, captureOrder, cancelOrder } from "./paypal";
import { fetchGoldPriceUSD, fetchGoldPriceINR } from "./services/gold-price-service";
import { OpenAI } from "openai";
import { Readable } from "stream";

// Define the USD to INR conversion rate - this is just a fallback
const USD_TO_INR_RATE = 83.5;

// Configure storage for uploaded files
const storage_config = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = "./uploads";
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    const ext = path.extname(file.originalname);
    cb(null, file.fieldname + "-" + uniqueSuffix + ext);
  },
});

const upload = multer({ storage: storage_config });

// Configure OpenAI client if API key is available
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function registerRoutes(app: Express): Promise<Server> {
  app.use(express.json({ limit: "50mb" }));
  app.use(express.urlencoded({ extended: true, limit: "50mb" }));

  // Set up authentication
  setupAuth(app);

  // Serve uploaded files statically
  app.use("/uploads", express.static("uploads"));
