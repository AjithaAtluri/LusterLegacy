import { useState, useEffect, useRef } from "react";
import { useLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { Separator } from "@/components/ui/separator";
import { Button } from "@/components/ui/button";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";
import { Badge } from "@/components/ui/badge";
import {
  LayoutDashboard,
  Package,
  GalleryHorizontal,
  ShoppingBag,
  UserCircle,
  LogOut,
  Menu,
  X,
  Diamond,
  Gem,
  Sparkles,
  Paintbrush,
  Receipt,
  Wand2,
  PlusCircle,
  MessageSquare,
  Users,
  MessageCircle,
  ChevronRight,
  ChevronDown,
  AlertCircle
} from "lucide-react";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
// Import our new utilities
import { useLoadingTimeout } from "@/hooks/use-loading-timeout";
import { 
  getAdminAuth, 
  isValidAdminAuth, 
  saveAdminAuth 
} from "@/lib/admin-auth-storage";
import { 
  verifyAdminAuth, 
  emergencyAdminAuth, 
  syncAdminCookie 
} from "@/lib/admin-auth-api";

interface AdminLayoutProps {
  children: React.ReactNode;
  title: string;
}

export default function AdminLayout({ children, title }: AdminLayoutProps) {
  const [, setLocation] = useLocation();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isCustomerRequestsOpen, setIsCustomerRequestsOpen] = useState(true); // Always expanded by default
  const { toast } = useToast();
  
  // State to track if direct API admin check is in progress
  const [directAdminCheckInProgress, setDirectAdminCheckInProgress] = useState(false);
  
  // State to track if we've performed emergency authentication
  const [performedEmergencyAuth, setPerformedEmergencyAuth] = useState(false);
  
  // Track environment
  const isProduction = import.meta.env.PROD || import.meta.env.MODE === 'production';
  const [environment] = useState(isProduction ? 'Production' : 'Development');
  
  // Use the main auth hook for authentication including stable loading state
  const { user, isLoading, stableLoading, error, logoutMutation } = useAuth();
  
  // Monitor loading state for timeouts
  const { hasTimedOut, timeElapsed } = useLoadingTimeout(stableLoading, 7000);
  
  // Fetch data for pending request counts
  const { data: customDesigns } = useQuery({
    queryKey: ['/api/custom-designs'],
    enabled: !!user?.id
  });
  
  // Using personalization terminology while keeping the original API endpoint for backward compatibility
  const { data: personalizationRequests } = useQuery({
    queryKey: ['/api/customization-requests'], // Original endpoint name preserved for compatibility
    enabled: !!user?.id
  });
  
  const { data: quoteRequests } = useQuery({
    queryKey: ['/api/quote-requests'],
    enabled: !!user?.id
  });

  // Fetch contact messages to count unread ones
  const { data: contactMessages } = useQuery({
    queryKey: ['/api/admin/contact'],
    enabled: !!user?.id
  });
  
  // Count pending requests
  const pendingDesigns = Array.isArray(customDesigns) 
    ? customDesigns.filter((design: any) => design.status === "pending").length 
    : 0;
    
  const pendingPersonalizations = Array.isArray(personalizationRequests) 
    ? personalizationRequests.filter((req: any) => req.status === "pending").length 
    : 0;
    
  const pendingQuotes = Array.isArray(quoteRequests) 
    ? quoteRequests.filter((req: any) => req.status === "pending").length 
    : 0;

  // Count unread messages
  const unreadMessages = Array.isArray(contactMessages)
    ? contactMessages.filter((message: any) => message.isRead === false).length
    : 0;

  // Check if the user is an admin
  const isAdmin = user?.role === 'admin' || user?.role === 'limited-admin';
    
  // Log authentication state for debugging
  useEffect(() => {
    console.log('Admin layout - checking auth state:', {
      user,
      isLoading,
      stableLoading,
      loadingTimeout: hasTimedOut
    });
    console.log(`Admin layout - environment detected: ${environment}`);
  }, [user, isLoading, stableLoading, hasTimedOut, environment]);
  
  // Effect to check for cached admin credentials in session storage
  useEffect(() => {
    // If we're loading or already have a user, skip this
    if (isLoading || user) {
      return;
    }
    
    // Try to load cached admin auth data
    const cachedAdminAuth = getAdminAuth();
    if (cachedAdminAuth) {
      console.log('Loaded cached user data from session storage:', cachedAdminAuth);
      
      // In production, assume cached data is valid and use it immediately
      // This prevents the infinite loading state while the API checks happen
      if (isProduction) {
        console.log('Production environment with cached data - bypassing loading state');
      }
    }
  }, [isLoading, user, isProduction]);
  
  // Effect to check for admin authentication timeout
  useEffect(() => {
    // If we've already handled this timeout, don't try again
    if (hasTimedOut && !performedEmergencyAuth && !directAdminCheckInProgress) {
      setDirectAdminCheckInProgress(true);
      
      // If we're in a timeout situation, but have a cached admin user,
      // allow access but try to verify in the background
      const cachedAdminAuth = getAdminAuth();
      
      if (cachedAdminAuth && isValidAdminAuth()) {
        console.log('Admin layout - cached user appears to be admin, verifying with direct API call');
        
        // Attempt to verify the admin status directly with API
        console.log('Admin layout - checking admin auth endpoint...');
        
        // Perform emergency admin auth check
        (async () => {
          try {
            const adminAuthResult = await verifyAdminAuth({ 
              forceRefresh: true,
              storeResult: true
            });
            
            if (adminAuthResult) {
              console.log('Admin layout - admin auth check successful:', adminAuthResult.username || adminAuthResult.loginID);
              console.log('Admin layout - user is verified admin via /api/auth/me');
              
              // Also refresh the admin cookie
              await syncAdminCookie(adminAuthResult.id);
              
              // Update React Query cache to help break any loading state
              import("@/lib/queryClient").then(({queryClient}) => {
                queryClient.setQueryData(["/api/user"], adminAuthResult);
              });
            } else {
              console.error('Admin layout - admin auth check failed');
              // Despite failed check, still use cached data if we have it
              if (cachedAdminAuth) {
                console.log('Error in auth check but cached user is admin - allowing access but may encounter further issues');
              }
            }
          } catch (error) {
            console.error('Error during admin auth check:', error);
            // Still use cached data if we have it
            if (cachedAdminAuth) {
              console.log('Error in optimized auth path:', error);
            }
          } finally {
            setDirectAdminCheckInProgress(false);
            setPerformedEmergencyAuth(true);
          }
        })();
      } else {
        // No cached admin auth, perform emergency authentication
        console.log('Admin layout - no cached admin data, attempting emergency authentication');
        
        (async () => {
          try {
            // Try to get the admin ID from URL if available
            let adminId: number | undefined;
            try {
              const urlParams = new URLSearchParams(window.location.search);
              const adminIdParam = urlParams.get('admin_id');
              if (adminIdParam) {
                adminId = parseInt(adminIdParam);
                if (isNaN(adminId)) adminId = undefined;
              }
            } catch (e) {
              console.warn('Failed to parse admin_id from URL:', e);
            }
            
            // Use our improved emergency auth function
            const emergencyAuthResult = await emergencyAdminAuth(adminId);
            
            if (emergencyAuthResult) {
              console.log('Admin layout - emergency admin auth successful:', emergencyAuthResult.username || emergencyAuthResult.loginID);
              
              // Update React Query cache to help break any loading state
              import("@/lib/queryClient").then(({queryClient}) => {
                queryClient.setQueryData(["/api/user"], emergencyAuthResult);
              });
            } else {
              console.error('Admin layout - emergency admin auth failed');
              toast({
                title: "Authentication Error",
                description: "Failed to verify admin access. Please try logging in again.",
                variant: "destructive"
              });
            }
          } catch (error) {
            console.error('Error during emergency admin auth:', error);
          } finally {
            setDirectAdminCheckInProgress(false);
            setPerformedEmergencyAuth(true);
          }
        })();
      }
    }
  }, [hasTimedOut, performedEmergencyAuth, directAdminCheckInProgress, toast]);
  

  
  // Redirect to login page if not authenticated or not an admin
  // Use a separate state and timeout to handle loading situations
  const [loadingTimeout, setLoadingTimeout] = useState(false);
  
  useEffect(() => {
    // Set a maximum loading time of 2 seconds
    if (isLoading || stableLoading) {
      // Set a timeout to force continuation after 2 seconds
      const timer = setTimeout(() => {
        console.log("Admin layout - loading timeout reached");
        setLoadingTimeout(true);
      }, 2000);
      
      return () => clearTimeout(timer); // Clean up the timer
    } else {
      setLoadingTimeout(false); // Reset when loading completes
    }
  }, [isLoading, stableLoading]);

  useEffect(() => {
    const checkAdminAuth = async () => {
      console.log("Admin layout - checking auth state:", { 
        user, 
        isLoading, 
        stableLoading,
        loadingTimeout 
      });
      
      // Only continue if we're not loading OR timeout has occurred
      if ((isLoading || stableLoading) && !loadingTimeout) {
        console.log("Admin layout - waiting for auth state to load...");
        
        // Enhanced emergency direct check after 1 second to exit infinite loading situations
        setTimeout(async () => {
          if (isLoading || stableLoading) {
            try {
              console.log("Admin layout - emergency direct admin check");
              
              // First check cache from our storage utility
              const cachedAdminAuth = getAdminAuth();
              if (cachedAdminAuth && isValidAdminAuth()) {
                console.log("Admin verified via utility cache - bypassing React Query");
                
                // Update React Query cache to help break the loading state
                import("@/lib/queryClient").then(({queryClient}) => {
                  queryClient.setQueryData(["/api/user"], cachedAdminAuth);
                });
                
                // Don't redirect, let the auth check continue naturally with the cached data
                return;
              }
              
              // Cache not available, try direct API verification
              const adminAuthResult = await verifyAdminAuth({ 
                forceRefresh: true, 
                storeResult: true
              });
              
              if (adminAuthResult) {
                console.log("Admin verified via direct auth API - bypassing React Query");
                
                // Update React Query cache to help break the loading state
                import("@/lib/queryClient").then(({queryClient}) => {
                  queryClient.setQueryData(["/api/user"], adminAuthResult);
                });
                
                // Also sync the admin cookie for future requests
                await syncAdminCookie(adminAuthResult.id);
                
                // Don't redirect, let the auth check continue naturally
                return;
              }
              
              // If all else fails, try the emergency admin auth
              const emergencyAuthResult = await emergencyAdminAuth();
              if (emergencyAuthResult) {
                console.log("Admin verified via emergency auth - bypassing React Query");
                
                // Update React Query cache to help break the loading state
                import("@/lib/queryClient").then(({queryClient}) => {
                  queryClient.setQueryData(["/api/user"], emergencyAuthResult);
                });
                
                // Don't redirect, let the auth check continue naturally
                return;
              }
              
              // If both checks failed, redirect to login
              console.log("All emergency admin checks failed - redirecting to login");
              window.location.href = window.location.origin + "/admin/login";
            } catch (error) {
              console.error("Error during emergency direct admin check:", error);
              
              // On error, fallback to login page to be safe
              window.location.href = window.location.origin + "/admin/login";
            }
          }
        }, 1000); // Try after 1 second to give normal auth flow a chance
        
        return; // Wait for loading to complete or timeout
      }
      
      // Continue with normal authentication logic if loading is complete
      // This code runs when user data is available
    };
    
    // Run the check function when component mounts or dependencies change
    checkAdminAuth();

      // Perform a multi-level authentication check to ensure we're truly authenticated
      try {
        // Check if we're in production environment
        const isProduction = window.location.hostname.includes('.replit.app') || 
                            window.location.hostname.includes('lusterlegacy.co');
        console.log(`Admin layout - environment detected: ${isProduction ? 'Production' : 'Development'}`);
        
        // Production environments may have cached user data in sessionStorage to reduce flickering
        let cachedUserData = null;
        try {
          const cachedDataStr = sessionStorage.getItem('adminUserData');
          if (cachedDataStr) {
            cachedUserData = JSON.parse(cachedDataStr);
            console.log("Loaded cached user data from session storage:", cachedUserData);
          }
        } catch (storageError) {
          console.warn("Error accessing session storage:", storageError);
        }
        
        // Check 1: First check the cached user from React Query
        if (!user) {
          console.log("Admin layout - no user in cache, will verify with API");
          
          // In production with cached data, we can try to use it temporarily 
          if (isProduction && cachedUserData && 
              (cachedUserData.role === "admin" || cachedUserData.role === "limited-admin")) {
            console.log("Using cached admin data while verifying with API...");
            // Update the cache with cached data
            import("@/lib/queryClient").then(({queryClient}) => {
              queryClient.setQueryData(["/api/user"], cachedUserData);
            });
          }
        } else if (user.role !== "admin" && user.role !== "limited-admin") {
          console.log("Admin layout - user is not admin or limited-admin, redirecting to home page");
          toast({
            title: "Access restricted",
            description: "You don't have permission to access the admin dashboard",
            variant: "destructive"
          });
          window.location.href = "/";
          return;
        } else {
          console.log("Admin layout - cached user appears to be admin, verifying with direct API call");
        }

        // Check 2: Check admin-specific auth API
        console.log("Admin layout - checking admin auth endpoint...");
        const adminAuthResponse = await fetch("/api/auth/me", { 
          credentials: "include",
          headers: {
            "Cache-Control": "no-cache, no-store, must-revalidate",
            "Pragma": "no-cache",
            "Expires": "0",
            "X-Admin-Verification": "true" // Add special header to indicate this is an admin verification
          }
        });
        
        // If admin auth succeeded, we're definitely authenticated properly
        if (adminAuthResponse.ok) {
          const adminData = await adminAuthResponse.json();
          console.log("Admin layout - admin auth check successful:", adminData);
          
          // Make sure it's still an admin or limited-admin account
          if (adminData.role === "admin" || adminData.role === "limited-admin") {
            console.log(`Admin layout - user is verified ${adminData.role} via /api/auth/me`);
            
            // Store admin data in sessionStorage for faster loading on page refresh in production
            try {
              sessionStorage.setItem('adminUserData', JSON.stringify(adminData));
              console.log("Updated cached user data in storage");
              
              // Call the sync endpoint to ensure cookies and session are in sync
              fetch('/api/auth/sync-admin-cookie', {
                method: 'POST',
                credentials: 'include',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ adminId: adminData.id })
              }).then(response => {
                if (response.ok) {
                  console.log("Admin cookie sync successful");
                } else {
                  console.warn("Admin cookie sync failed, admin access may expire prematurely");
                }
              }).catch(error => {
                console.error("Admin cookie sync request failed:", error);
              });
            } catch (storageError) {
              console.warn("Failed to cache admin data:", storageError);
            }
            
            // Update the cache with this fresh data
            import("@/lib/queryClient").then(({queryClient}) => {
              queryClient.setQueryData(["/api/user"], adminData);
            });
            
            // For production, check if we need to bypass loading state
            if (window.location.hostname.includes('.replit.app') || 
                window.location.hostname.includes('lusterlegacy.co')) {
              console.log("Production environment with cached data - bypassing loading state");
              // Additional production-only adjustments can be added here
            }
            
            return; // Allow access
          } else {
            console.log("User is authenticated but admin/limited-admin role missing in admin auth check");
            toast({
              title: "Access restricted",
              description: "Admin privileges not found in authentication data",
              variant: "destructive"
            });
            window.location.href = "/admin/login";
            return;
          }
        }
        
        // Check 3: Try regular auth endpoint as fallback
        console.log("Admin layout - admin auth check failed, trying regular user endpoint...");
        const userResponse = await fetch("/api/user", { 
          credentials: "include",
          headers: {
            "Cache-Control": "no-cache, no-store, must-revalidate",
            "Pragma": "no-cache",
            "Expires": "0"
          }
        });
        
        if (userResponse.ok) {
          const userData = await userResponse.json();
          console.log("Admin layout - regular auth check successful:", userData);
          
          if (userData.role === "admin" || userData.role === "limited-admin") {
            console.log(`Admin layout - user is verified ${userData.role} via /api/user`);
            
            // Store admin data in sessionStorage for faster loading on page refresh in production
            try {
              sessionStorage.setItem('adminUserData', JSON.stringify(userData));
              console.log("Updated cached user data in storage from regular auth endpoint");
            } catch (storageError) {
              console.warn("Failed to cache admin data:", storageError);
            }
            
            // Update the cache with this fresh data
            import("@/lib/queryClient").then(({queryClient}) => {
              queryClient.setQueryData(["/api/user"], userData);
            });
            
            // Since admin auth failed but regular auth succeeded, let's continue anyway
            // The user is authenticated as admin in the main system
            console.log("User has admin privileges but admin-specific endpoint failed - using regular auth");
            
            // For production environments, also try to set the admin cookie via a special endpoint
            if (window.location.hostname.includes('.replit.app') || 
                window.location.hostname.includes('lusterlegacy.co')) {
              try {
                console.log("Production environment - attempting to establish admin cookie");
                // Fire and forget request to sync admin cookie with passport session
                fetch("/api/auth/sync-admin-cookie", { 
                  method: "POST",
                  credentials: "include"
                }).then(res => {
                  console.log("Admin cookie sync response:", res.status);
                }).catch(err => {
                  console.warn("Admin cookie sync failed:", err);
                });
              } catch (syncError) {
                console.warn("Failed to sync admin cookie:", syncError);
              }
            }
            
            // Display a warning toast that some admin features might be limited
            toast({
              title: "Limited admin access",
              description: "You're authenticated but some admin features might be restricted",
              // Using default variant since "warning" is not available in this component
              variant: "default"
            });
            
            return; // Allow access
          } else {
            // User is authenticated but not an admin or limited-admin
            console.log("User is authenticated but doesn't have admin privileges");
            toast({
              title: "Access restricted",
              description: "You don't have permission to access the admin dashboard",
              variant: "destructive"
            });
            window.location.href = "/";
            return;
          }
        }
        
        // If we reach here, both auth checks failed
        console.log("Both auth checks failed - user is not authenticated");
        toast({
          title: "Authentication required",
          description: "Please log in to access the admin dashboard",
          variant: "destructive"
        });
        window.location.href = "/admin/login";
        return;
      } catch (error) {
        console.error("Error during auth check:", error);
        // Fall back to React Query state only if an exception occurred
        if (!user) {
          console.log("Error in auth check and no cached user - redirecting to login");
          window.location.href = "/admin/login";
          return;
        } else if (user.role !== "admin" && user.role !== "limited-admin") {
          console.log("Error in auth check and cached user is not admin or limited-admin - redirecting home");
          window.location.href = "/";
          return;
        } else {
          console.log(`Error in auth check but cached user is ${user.role} - allowing access but may encounter further issues`);
          // Continue with access and hope for the best
          return;
        }
      }
    };
    
    // Run the check immediately
    checkAdminAuth();
  }, [user, isLoading, stableLoading, toast]);
  
  // Handle logout from both auth systems
  const handleLogout = async () => {
    try {
      console.log("Admin logout - logging out from both auth systems");
      
      // First try to log out from legacy admin auth
      try {
        await apiRequest("POST", "/api/auth/logout");
        console.log("Admin logout - successfully logged out from admin auth");
      } catch (adminLogoutError) {
        console.warn("Admin logout - error logging out from admin auth:", adminLogoutError);
        // Continue with main logout anyway
      }
      
      // Now use the main logout mutation which also attempts both logouts
      logoutMutation.mutate(undefined, {
        onSuccess: () => {
          console.log("Admin logout - successfully logged out from main auth");
          
          toast({
            title: "Logged out successfully",
            description: "You have been logged out of the admin dashboard",
          });
          
          // Use hard navigation for clean slate
          window.location.href = "/";
        },
        onError: (error) => {
          console.error("Admin logout - error logging out from main auth:", error);
          
          // Force logout by clearing cookies manually and redirecting
          document.cookie.split(";").forEach(cookie => {
            const [name] = cookie.trim().split("=");
            document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
          });
          
          toast({
            title: "Logged out (forced)",
            description: "You have been logged out of the admin dashboard",
          });
          
          // Redirect to home
          window.location.href = "/";
        }
      });
    } catch (error) {
      console.error("Admin logout - unexpected error:", error);
      // Force redirect to home on any error
      window.location.href = "/";
    }
  };
  
  // Fetch pending testimonials count
  const { data: testimonials } = useQuery({
    queryKey: ['/api/admin/testimonials'],
    enabled: !!user?.id
  });
  
  // Count pending testimonials (only count unapproved ones)
  const pendingTestimonials = Array.isArray(testimonials) 
    ? testimonials.filter((t: any) => t.status === 'pending' || !t.isApproved).length 
    : 0;
    
  // Define TypeScript interfaces for nav items
  interface NavSubItem {
    title: string;
    icon: React.ReactNode;
    href: string;
    badge?: number;
  }
  
  interface NavItem {
    title: string;
    icon: React.ReactNode;
    href?: string;
    badge?: number;
    isGroup?: boolean;
    items?: NavSubItem[];
  }
  
  // Determine navigation items based on user role
  const isLimitedAdmin = user?.role === "limited-admin";
  
  // Base navigation items for all admin roles
  const baseNavItems: NavItem[] = [
    { 
      title: "Dashboard", 
      icon: <LayoutDashboard className="h-5 w-5" />, 
      href: "/admin/dashboard" 
    },
    { 
      title: "Products", 
      icon: <GalleryHorizontal className="h-5 w-5" />, 
      href: "/admin/products" 
    },
    {
      title: "Customer Requests",
      icon: <MessageCircle className="h-5 w-5" />,
      isGroup: true,
      items: [
        { 
          title: "Custom Design Requests", 
          icon: <Package className="h-5 w-5" />, 
          href: "/admin/designs",
          badge: pendingDesigns > 0 ? pendingDesigns : undefined
        },
        {
          title: "Product Personalization Requests",
          icon: <Paintbrush className="h-5 w-5" />,
          href: "/admin/personalizations",
          badge: pendingPersonalizations > 0 ? pendingPersonalizations : undefined
        },
        {
          title: "Product Quote Requests",
          icon: <Receipt className="h-5 w-5" />,
          href: "/admin/quotes",
          badge: pendingQuotes > 0 ? pendingQuotes : undefined
        },
      ]
    },
    {
      title: "Contact Messages",
      icon: <MessageSquare className="h-5 w-5" />,
      href: "/admin/contact-messages",
      badge: unreadMessages > 0 ? unreadMessages : undefined
    }
  ];
  
  // Additional navigation items for full admin
  const fullAdminItems: NavItem[] = [
    {
      title: "Product Types",
      icon: <Package className="h-5 w-5" />,
      href: "/admin/product-types"
    },
    { 
      title: "Metal Types", 
      icon: <Diamond className="h-5 w-5" />, 
      href: "/admin/metal-types" 
    },
    { 
      title: "Stone Types", 
      icon: <Gem className="h-5 w-5" />, 
      href: "/admin/stone-types" 
    },
    {
      title: "Client Stories",
      icon: <MessageSquare className="h-5 w-5" />,
      href: "/admin/testimonials",
      badge: pendingTestimonials > 0 ? pendingTestimonials : undefined
    },
    { 
      title: "AI Content Generator(For new Products)", 
      icon: <Wand2 className="h-5 w-5" />, 
      href: "/admin/ai-generator" 
    },
    {
      title: "User Management",
      icon: <Users className="h-5 w-5" />,
      href: "/admin/users"
    }
  ];
  
  // Combine navigation items based on user role
  const navItems: NavItem[] = isLimitedAdmin ? baseNavItems : [...baseNavItems, ...fullAdminItems];
  
  // Current location for determining active route
  const [location] = useLocation();
  
  // Show loading UI or timeout recovery UI
  if (stableLoading) {
    // If we have a cache, let's check if it's valid
    const cachedAdminAuth = getAdminAuth();
    const isValidCache = cachedAdminAuth && isValidAdminAuth();
    
    // If we have a valid cache and this is taking too long, use emergency mode
    if (hasTimedOut && isValidCache) {
      return (
        <div className="min-h-screen flex flex-col bg-background">
          {/* Limited emergency admin header */}
          <header className="border-b sticky top-0 z-30 bg-background">
            <div className="flex h-16 items-center px-4 sm:px-6">
              <a href="/admin/dashboard" className="font-playfair text-xl font-bold">
                Luster<span className="text-primary">Legacy</span> Admin
              </a>
              <Badge variant="outline" className="ml-2">Emergency Mode</Badge>
              
              <div className="ml-auto flex items-center gap-4">
                <Button 
                  onClick={() => setLocation('/admin/login')}
                  variant="destructive" 
                  size="sm"
                >
                  Re-Login
                </Button>
              </div>
            </div>
          </header>
          
          {/* Emergency mode notice */}
          <div className="flex-1 p-4 sm:p-6 md:p-8">
            <div className="mb-6 p-4 border border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <AlertCircle className="h-5 w-5 text-yellow-600 dark:text-yellow-500" />
                <h2 className="text-lg font-semibold text-yellow-700 dark:text-yellow-400">
                  Emergency Mode Active
                </h2>
              </div>
              <p className="text-sm text-yellow-700 dark:text-yellow-400 mb-2">
                The authentication system is currently experiencing issues. Using cached credentials to maintain your session.
              </p>
              <p className="text-sm text-yellow-700 dark:text-yellow-400">
                <span className="font-medium">Logged in as:</span> {cachedAdminAuth?.username || cachedAdminAuth?.loginID} (Last verified: {new Date(cachedAdminAuth?.authTime || 0).toLocaleTimeString()})
              </p>
              <div className="mt-3">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => {
                    // Attempt emergency auth
                    emergencyAdminAuth(cachedAdminAuth?.id).then(result => {
                      if (result) {
                        toast({
                          title: "Authentication Refreshed",
                          description: "Your session has been successfully refreshed.",
                        });
                        // Reload the page to restart normal auth flow
                        window.location.reload();
                      } else {
                        toast({
                          title: "Authentication Failed",
                          description: "Unable to refresh your session. Please re-login.",
                          variant: "destructive"
                        });
                      }
                    });
                  }}
                >
                  Try to Refresh Session
                </Button>
              </div>
            </div>
            
            {/* Main content in emergency mode */}
            <main className="mt-6">
              {children}
            </main>
          </div>
        </div>
      );
    }
    
    // Regular loading UI with timeout indicator
    return (
      <div className="flex flex-col items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4"></div>
        
        {/* Show timeout message if loading is taking too long */}
        {hasTimedOut && (
          <div className="text-center mt-4 max-w-md px-4">
            <h3 className="text-lg font-medium mb-2">
              Loading is taking longer than expected
            </h3>
            <p className="text-sm text-muted-foreground mb-4">
              Time elapsed: {(timeElapsed / 1000).toFixed(1)}s
            </p>
            <div className="flex justify-center gap-2">
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => window.location.reload()}
              >
                Reload Page
              </Button>
              
              <Button 
                variant="default" 
                size="sm"
                onClick={() => setLocation('/admin/login')}
              >
                Go to Login
              </Button>
            </div>
          </div>
        )}
      </div>
    );
  }
  
  return (
    <div className="min-h-screen flex flex-col bg-background">
      {/* Header */}
      <header className="border-b sticky top-0 z-30 bg-background">
        <div className="flex h-16 items-center px-4 sm:px-6">
          <div className="md:hidden mr-2">
            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon">
                  <Menu className="h-6 w-6" />
                </Button>
              </SheetTrigger>
              <SheetContent side="left" className="p-0">
                <div className="flex flex-col h-full">
                  <div className="flex items-center p-4 border-b">
                    <div>
                      <a href="/admin/dashboard" className="font-playfair text-xl font-bold">
                        Luster<span className="text-primary">Legacy</span> Admin
                      </a>
                      {user?.role === "limited-admin" && (
                        <Badge variant="outline" className="ml-2">Limited Access</Badge>
                      )}
                    </div>
                    <Button variant="ghost" size="icon" className="ml-auto" onClick={() => setIsMobileMenuOpen(false)}>
                      <X className="h-5 w-5" />
                    </Button>
                  </div>
                  <div className="flex-1 overflow-auto py-2">
                    <nav className="flex flex-col gap-1 px-2">
                      {navItems.map((item, idx) => (
                        item.isGroup ? (
                          <Collapsible key={`group-${idx}`} defaultOpen={isCustomerRequestsOpen}>
                            <CollapsibleTrigger className="flex w-full items-center justify-between rounded-lg px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground">
                              <div className="flex items-center gap-3">
                                {item.icon}
                                {item.title}
                              </div>
                              {isCustomerRequestsOpen ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
                            </CollapsibleTrigger>
                            <CollapsibleContent className="pl-4">
                              {item.items?.map((subItem) => (
                                <a
                                  key={subItem.href}
                                  href={subItem.href}
                                  onClick={() => setIsMobileMenuOpen(false)}
                                  className={`flex items-center justify-between rounded-lg px-3 py-2 text-sm transition-all hover:bg-accent hover:text-accent-foreground ${
                                    location === subItem.href ? "bg-accent/50 font-medium" : ""
                                  }`}
                                >
                                  <div className="flex items-center gap-3">
                                    {subItem.icon}
                                    {subItem.title}
                                  </div>
                                  {subItem.badge && (
                                    <Badge variant="destructive" className="ml-2">{subItem.badge}</Badge>
                                  )}
                                </a>
                              ))}
                            </CollapsibleContent>
                          </Collapsible>
                        ) : (
                          <a
                            key={item.href || `mobile-nav-item-${idx}`}
                            href={item.href}
                            onClick={() => setIsMobileMenuOpen(false)}
                            className={`flex items-center justify-between rounded-lg px-3 py-2 text-sm transition-all hover:bg-accent hover:text-accent-foreground ${
                              location === item.href ? "bg-accent/50 font-medium" : ""
                            }`}
                          >
                            <div className="flex items-center gap-3">
                              {item.icon}
                              {item.title}
                            </div>
                            {item.badge && (
                              <Badge variant="destructive" className="ml-2">{item.badge}</Badge>
                            )}
                          </a>
                        )
                      ))}
                    </nav>
                  </div>
                  <div className="border-t p-4">
                    <Button 
                      variant="ghost" 
                      className="w-full justify-start text-muted-foreground" 
                      onClick={handleLogout}
                    >
                      <LogOut className="mr-2 h-5 w-5" />
                      Log out
                    </Button>
                  </div>
                </div>
              </SheetContent>
            </Sheet>
          </div>
          
          <div className="flex-1">
            <h1 className="font-playfair text-xl font-semibold tracking-tight">{title || "Admin Dashboard"}</h1>
          </div>
          
          <div className="flex items-center gap-4">
            <div className="hidden md:flex items-center">
              <UserCircle className="h-5 w-5 mr-2 text-muted-foreground" />
              <span className="text-sm font-medium">{user?.username}</span>
              {user?.role === "limited-admin" && (
                <Badge variant="outline" className="ml-2">Limited Access</Badge>
              )}
            </div>
            <Button variant="outline" size="sm" onClick={handleLogout} className="hidden md:flex">
              <LogOut className="mr-2 h-4 w-4" />
              Log out
            </Button>
          </div>
        </div>
      </header>
      
      <div className="flex flex-1">
        {/* Sidebar (desktop only) */}
        <div className="hidden md:flex w-64 flex-col border-r bg-background z-20">
          <div className="flex h-14 items-center border-b px-4">
            <a href="/admin/dashboard" className="font-playfair text-xl font-bold">
              Luster<span className="text-primary">Legacy</span>
            </a>
          </div>
          <nav className="flex flex-col gap-1 p-4">
            {navItems.map((item, idx) => (
              item.isGroup ? (
                <Collapsible key={`desktop-group-${idx}`} defaultOpen={isCustomerRequestsOpen} onOpenChange={setIsCustomerRequestsOpen}>
                  <CollapsibleTrigger className="flex w-full items-center justify-between rounded-lg px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground">
                    <div className="flex items-center gap-3">
                      {item.icon}
                      {item.title}
                    </div>
                    {isCustomerRequestsOpen ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
                  </CollapsibleTrigger>
                  <CollapsibleContent className="pl-4">
                    {item.items?.map((subItem) => (
                      <a
                        key={subItem.href}
                        href={subItem.href}
                        className={`flex items-center justify-between rounded-lg px-3 py-2 text-sm transition-all hover:bg-accent hover:text-accent-foreground ${
                          location === subItem.href ? "bg-accent/50 font-medium" : ""
                        }`}
                      >
                        <div className="flex items-center gap-3">
                          {subItem.icon}
                          {subItem.title}
                        </div>
                        {subItem.badge && (
                          <Badge variant="destructive" className="ml-2">{subItem.badge}</Badge>
                        )}
                      </a>
                    ))}
                  </CollapsibleContent>
                </Collapsible>
              ) : (
                <a
                  key={item.href || `nav-item-${idx}`}
                  href={item.href}
                  className={`flex items-center justify-between rounded-lg px-3 py-2 text-sm transition-all hover:bg-accent hover:text-accent-foreground ${
                    location === item.href ? "bg-accent/50 font-medium" : ""
                  }`}
                >
                  <div className="flex items-center gap-3">
                    {item.icon}
                    {item.title}
                  </div>
                  {item.badge && (
                    <Badge variant="destructive" className="ml-2">{item.badge}</Badge>
                  )}
                </a>
              )
            ))}
          </nav>
        </div>
        
        {/* Main content */}
        <main className="flex flex-1 flex-col overflow-hidden">
          <div className="flex-1 overflow-auto p-4 sm:p-6 md:p-8">
            {children}
          </div>
        </main>
      </div>
    </div>
  );
}
